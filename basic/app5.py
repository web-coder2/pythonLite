"""
3.6 Списки и операции над ними

Подвиг 4. Вводятся названия городов в одну строчку через пробел. На основе этой строки формируется список с помощью команды:
cities = input().split()
Необходимо проверить, присутствует ли в этом списке город "Москва".
Вывести на экран True, если присутствует и False - в противном случае.
Решить эту задачу следует без использования условного оператора.

Sample Input: Тверь Уфа Москва Казань
Sample Output: True
"""

cities = input("input cities >>> ").split(" ")
print(cities)

if "Москва" in cities:
    print(True)
else:
    print(False)

"""
3.6 Списки и операции над ними

Подвиг 3. Вводятся три целых числа в одну строку через пробел. Сформируйте список lst,
хранящий эти значения в порядке их ввода. Результат выведите на экран, используя команду:
print(lst)

Sample Input: 8 11 3
Sample Output: [8, 11, 3]
"""
nums = map(int, input("input num1, num2, num3 >>> ").split(" "))
lst = list(nums)
print(lst)

"""
3.6 Списки и операции над ними

Подвиг 6. Вводятся названия городов в одну строчку через пробел.
На основе этой строки формируется список с помощью команды:

cities = input().split()

Необходимо вывести значение последнего элемента этого списка на экран.

Sample Input: Москва Питер Уфа Казань Владимир
Sample Output: Владимир
"""

newCities = input("input new cities >>> ").split(" ")
print(newCities[-1])

"""
3.6 Списки и операции над ними

Подвиг 7. Вводятся оценки студента (целые числа от 2 до 5) в одну строчку через пробел. На основе введенной строки формируется список командой:

marks = list(map(int, input().split()))

Необходимо вычислить средний балл и вывести его на экран с точностью до десятых (один знак после запятой).

Sample Input: 3 3 2 4 4 5 4 3 2
Sample Output: 3.3
"""

# Сохраняем данные в перемененную
marks = list(map(int, input("input marks >>> ").split()))

middle = round((sum(marks) / len(marks)), 1)
print(middle)

"""
3.6 Списки и операции над ними

Подвиг 8. Вводится информация по книге (каждое значение с новой строки):
название, автор, число страниц (целое число), цена (вещественное число).
На основе этих данных формируется список book с элементами в порядке их ввода.
Затем, из этого списка необходимо удалить 3-й элемент (число страниц),
в качестве автора записать "Пушкин" и цену увеличить в 2 раза.
Результат вывести на экран командой:

print(book)

Sample Input:
Мастер и Маргарита
Булгаков
233
435.45

Sample Output: ['Мастер и Маргарита', 'Пушкин', 870.9]
"""

title = input("title of book >>> ")
author = input("author of book >>> ")
pages = int(input("pages in the book >>> "))
price = float(input("price of the book >>> "))

book = [title, author, pages, price]
del(book[2])
book[1] = "Пушкин"
book[2] = book[2] * 2 # элементов в списке уже только 3 (после удаления pages)

print(book)

"""
3.6 Списки и операции над ними

Подвиг 10. Вводится число новых подписчиков канала по дням в одну строку через пробел.
На основе введенной строки необходимо сформировать список lst из целых чисел.
Требуется отсортировать элементы этого списка по убыванию и результат вывести на экран командой:

print(*lst)

Sample Input: 52 65 64 54 68 59 42 63
Sample Output: 68 65 64 63 59 54 52 42
"""

subs = list(map(int, input("input new subs >>> ").split(" ")))
sortedSubs = sorted(subs, reverse = True)
print(sortedSubs)


"""
3.6 Списки и операции над ними

Подвиг 12. Вводятся названия городов в одну строку через пробел.
На основе этой строки необходимо создать список lst и добавить его в конец следующего списка:

cities = ["Москва", "Тверь", "Вологда"]
Вывести результат на экран командой:
print(*lst)

Sample Input: Уфа Казань Севастополь
Sample Output: Москва Тверь Вологда Уфа Казань Севастополь
"""

newCities = list(input("input new cityes >>> ").split())
cities = ["Москва", "Тверь", "Вологда"]
proxy = cities
cities = cities + newCities
newCities = newCities + proxy

print(cities)
print(newCities)
